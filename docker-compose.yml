networks:
  proxy:
    external: true
  backend:

volumes:
  db-data:

services:
  web:
    build: backend/.
    environment:
      PGHOST: ${DB_HOST}
      PGUSER: ${DB_USER}
      PGPASSWORD: ${DB_PASSWORD}
      PGDATABASE: ${DB_NAME}
      PGPORT: ${DB_PORT}
    networks:
      - backend
    depends_on:
      - db
      - migrate

  migrate:
    build: database
    command: npm run migrate up
    networks:
      - backend
    environment:
      DATABASE_URL: postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}
    depends_on:
      db:
        condition: service_healthy

  db:
    hostname: ${DB_HOST}
    image: postgres:16
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    networks:
      - backend
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    build:
      context: .
      dockerfile: nginx/Dockerfile
    ports:
      - "8080:80"
    networks:
      - backend
      - proxy
    depends_on:
      - web
